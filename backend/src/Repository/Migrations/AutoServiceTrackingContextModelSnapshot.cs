// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Contexts;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(AutoServiceTrackingContext))]
    partial class AutoServiceTrackingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.ServiceEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("HasWarranty")
                        .HasColumnType("bit");

                    b.Property<int>("Kilometers")
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ModelYear")
                        .HasColumnType("int");

                    b.Property<string>("ServiceCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LicensePlate")
                        .HasDatabaseName("IX_ServiceEntry_LicensePlate");

                    b.ToTable("ServiceEntries");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            LastName = "Admin Kaçmaz",
                            PasswordHash = new byte[] { 178, 64, 149, 107, 210, 217, 147, 202, 48, 86, 83, 148, 3, 56, 17, 236, 30, 136, 200, 29, 149, 127, 35, 116, 244, 27, 21, 36, 113, 187, 228, 91, 201, 184, 242, 85, 208, 175, 51, 36, 227, 49, 158, 137, 172, 79, 216, 214, 67, 152, 11, 176, 167, 252, 152, 250, 111, 226, 132, 223, 66, 106, 16, 211 },
                            PasswordSalt = new byte[] { 14, 205, 67, 194, 45, 90, 239, 197, 197, 20, 108, 218, 234, 167, 174, 103, 112, 97, 181, 4, 148, 175, 35, 71, 159, 79, 181, 204, 15, 225, 73, 38, 175, 49, 13, 254, 102, 181, 183, 198, 165, 168, 68, 51, 178, 230, 103, 96, 140, 97, 113, 96, 176, 103, 60, 248, 203, 87, 234, 106, 121, 255, 88, 118, 49, 23, 123, 15, 155, 191, 240, 73, 247, 210, 113, 53, 109, 39, 233, 237, 131, 72, 189, 126, 253, 38, 125, 205, 154, 72, 104, 127, 194, 206, 79, 79, 226, 122, 106, 248, 5, 160, 242, 218, 54, 49, 109, 128, 136, 132, 68, 129, 153, 143, 202, 61, 128, 205, 30, 221, 46, 48, 99, 28, 128, 104, 182, 249 },
                            Status = true
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
